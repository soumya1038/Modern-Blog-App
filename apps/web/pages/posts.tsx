import { useState, useEffect, useCallback } from 'react';

interface Post {
  _id: string;
  title: string;
  content: string;
  excerpt?: string;
  slug: string;
  status: string;
  likes: number;
  authorId: { email: string; avatar?: string };
  categoryId?: { name: string };
  readTime: { text: string; minutes: number; words: number };
  createdAt: string;
}

interface PostsResponse {
  posts: Post[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    hasMore: boolean;
    totalPages: number;
  };
}

export default function Posts() {
  const [posts, setPosts] = useState<Post[]>([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(1);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchPosts = useCallback(async (pageNum: number, reset = false) => {\n    if (loading) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const apiKey = localStorage.getItem('apiKey');\n      if (!apiKey) {\n        setError('API key required. Create one at /api-keys');\n        return;\n      }\n\n      const response = await fetch(`http://localhost:4000/v1/posts?page=${pageNum}&limit=5`, {\n        headers: { 'X-API-Key': apiKey }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      \n      const data: PostsResponse = await response.json();\n      \n      setPosts(prev => reset ? data.posts : [...prev, ...data.posts]);\n      setHasMore(data.pagination.hasMore);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch posts');\n    } finally {\n      setLoading(false);\n    }\n  }, [loading]);\n\n  useEffect(() => {\n    fetchPosts(1, true);\n  }, []);\n\n  const loadMore = () => {\n    if (hasMore && !loading) {\n      const nextPage = page + 1;\n      setPage(nextPage);\n      fetchPosts(nextPage);\n    }\n  };\n\n  const likePost = async (postId: string) => {\n    try {\n      const apiKey = localStorage.getItem('apiKey');\n      if (!apiKey) return;\n\n      const response = await fetch(`http://localhost:4000/v1/posts/${postId}/like`, {\n        method: 'POST',\n        headers: { 'X-API-Key': apiKey }\n      });\n      \n      if (response.ok) {\n        const result = await response.json();\n        setPosts(prev => prev.map(post => \n          post._id === postId \n            ? { ...post, likes: result.likes }\n            : post\n        ));\n      }\n    } catch (error) {\n      console.error('Failed to like post:', error);\n    }\n  };\n\n  if (error) {\n    return (\n      <div style={{ padding: '2rem', color: 'red' }}>\n        <h2>Error</h2>\n        <p>{error}</p>\n        <a href=\"/api-keys\">Create API Key</a>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: '2rem', fontFamily: 'Arial, sans-serif', maxWidth: '800px', margin: '0 auto' }}>\n      <h1>Blog Posts</h1>\n      \n      <div style={{ marginBottom: '2rem' }}>\n        <a href=\"/\" style={{ marginRight: '1rem' }}>← Home</a>\n        <a href=\"/api-keys\">Manage API Keys</a>\n      </div>\n\n      {posts.length === 0 && !loading ? (\n        <p>No posts found</p>\n      ) : (\n        <div>\n          {posts.map((post) => (\n            <article key={post._id} style={{ \n              border: '1px solid #ddd', \n              borderRadius: '8px', \n              padding: '1.5rem', \n              marginBottom: '1.5rem',\n              backgroundColor: '#fff'\n            }}>\n              <h2 style={{ margin: '0 0 0.5rem 0', color: '#333' }}>\n                <a href={`/posts/${post.slug}`} style={{ textDecoration: 'none', color: 'inherit' }}>\n                  {post.title}\n                </a>\n              </h2>\n              \n              <div style={{ fontSize: '14px', color: '#666', marginBottom: '1rem' }}>\n                <span>By {post.authorId.email}</span>\n                {post.categoryId && <span> in {post.categoryId.name}</span>}\n                <span> • {post.readTime.text}</span>\n                <span> • {new Date(post.createdAt).toLocaleDateString()}</span>\n                <span style={{ \n                  backgroundColor: post.status === 'published' ? '#28a745' : '#ffc107',\n                  color: 'white',\n                  padding: '2px 6px',\n                  borderRadius: '3px',\n                  fontSize: '12px',\n                  marginLeft: '0.5rem'\n                }}>\n                  {post.status}\n                </span>\n              </div>\n\n              {post.excerpt && (\n                <p style={{ color: '#555', lineHeight: '1.6' }}>{post.excerpt}</p>\n              )}\n              \n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginTop: '1rem' }}>\n                <button \n                  onClick={() => likePost(post._id)}\n                  style={{ \n                    background: 'none', \n                    border: '1px solid #ddd', \n                    borderRadius: '4px',\n                    padding: '0.5rem 1rem',\n                    cursor: 'pointer',\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '0.5rem'\n                  }}\n                >\n                  ❤️ {post.likes}\n                </button>\n                \n                <a \n                  href={`/posts/${post.slug}`}\n                  style={{ \n                    color: '#007bff', \n                    textDecoration: 'none',\n                    fontWeight: 'bold'\n                  }}\n                >\n                  Read more →\n                </a>\n              </div>\n            </article>\n          ))}\n        </div>\n      )}\n\n      {hasMore && (\n        <div style={{ textAlign: 'center', margin: '2rem 0' }}>\n          <button \n            onClick={loadMore}\n            disabled={loading}\n            style={{\n              padding: '1rem 2rem',\n              fontSize: '16px',\n              backgroundColor: loading ? '#ccc' : '#007bff',\n              color: 'white',\n              border: 'none',\n              borderRadius: '5px',\n              cursor: loading ? 'not-allowed' : 'pointer'\n            }}\n          >\n            {loading ? 'Loading...' : 'Load More Posts'}\n          </button>\n        </div>\n      )}\n\n      {!hasMore && posts.length > 0 && (\n        <div style={{ textAlign: 'center', color: '#666', margin: '2rem 0' }}>\n          <p>No more posts to load</p>\n        </div>\n      )}\n    </div>\n  );\n}